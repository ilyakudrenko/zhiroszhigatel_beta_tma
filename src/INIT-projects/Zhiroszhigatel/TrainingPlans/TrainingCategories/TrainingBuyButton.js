import React, { useState } from 'react';
import {AppRoot, Button, Snackbar} from "@telegram-apps/telegram-ui";
import { useNavigate } from "react-router-dom";
import axios from 'axios';
import { getSession } from "../../../CustomComponents/UserSession/session";
import INITProfileIcon from "../../../CustomComponents/Icons/ProfileIcon";
import fetchUserTrainingPlan from "../../../CustomComponents/UserSession/fetchUserTrainingPlan";

const handleClickHaptic = (effect = 'light') => {
    window.Telegram.WebApp.HapticFeedback.impactOccurred(effect);
};

const INITTrainingBuyButton = ({ title, description, trainingId, price }) => {
    const navigate = useNavigate();
    const [isGreen, setIsGreen] = useState(false);
    const [isSnackbarVisible, setSnackbarVisible] = useState(false);


    const addUserTraining = async (userId, trainingId) => {
        const BACKEND_PUBLIC_URL = process.env.REACT_APP_BACKEND_PUBLIC_URL;

        try {
            const response = await axios.post(`${BACKEND_PUBLIC_URL}/trainings/add-training`, {
                user_id: userId,
                training_id: trainingId,
            });
            return response.data;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:', error);
            throw error;
        }
    };

    const handleButtonClick = async () => {
        try {
            handleClickHaptic('light');
            const user = getSession();
            if (!user || !user.id) {
                alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —ç—Ç–æ—Ç –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
            const userPlans = await fetchUserTrainingPlan();
            const isAlreadyOwned = userPlans.some(plan => plan.trainingPlanId === trainingId);

            if (isAlreadyOwned) {
                alert("–≠—Ç–æ—Ç –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω.");
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram WebApp API
            console.log("üì¢ Checking Telegram WebApp API:", window.Telegram.WebApp);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ requestBilling
            if (window.Telegram?.WebApp?.requestBilling) {
                console.log("‚úÖ Telegram WebApp API –¥–æ—Å—Ç—É–ø–µ–Ω!");

                window.Telegram.WebApp.requestBilling({
                    currency: "USD",
                    amount: price * 100, // Telegram –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ü–µ–Ω—É –≤ —Ü–µ–Ω—Ç–∞—Ö
                    description: title,
                    payload: JSON.stringify({ user_id: user.id, training_id: trainingId }),
                    success: async () => {
                        console.log("‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!");
                        await addUserTraining(user.id, trainingId);

                        setSnackbarVisible(true);
                        setTimeout(() => {
                            window.location.reload();
                        }, 1800);
                    },
                    error: (err) => {
                        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã:", err);
                        alert("–û–ø–ª–∞—Ç–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                    }
                });

            } else {
                console.error("‚ùå requestBilling API –Ω–µ –Ω–∞–π–¥–µ–Ω!");
                alert("–í—ã –Ω–µ –≤ Telegram Mini App –∏–ª–∏ API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ @BotFather.");
            }

        } catch (error) {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            console.error(error);
        }
    };

    const handleCloseSnackbar = () => {
        setSnackbarVisible(false);
    };

    return (
        <AppRoot>
            <div style={{
                position: 'fixed',
                bottom: 0,
                left: 0,
                width: '100%',
                display: 'flex',
                justifyContent: 'center',
                paddingBottom: '20px',
                zIndex: 1000, // Ensure it‚Äôs on top of other elements
            }}>
                <Button
                    mode="filled"
                    size="l"
                    onClick={handleButtonClick}
                    style={{
                        backgroundColor: isGreen ? '#53E651' : '',
                    }}
                >
                    –ö—É–ø–∏—Ç—å: {price}
                </Button>
            </div>

            {isSnackbarVisible && (
                <Snackbar
                    before={<INITProfileIcon/>}
                    children={title}
                    description="–î–æ–±–∞–≤–ª–µ–Ω –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É(–≤—ã –º–æ–∂–∏—Ç–µ –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ)"
                    duration={2000}
                    onClose={handleCloseSnackbar}
                    style={{
                        zIndex: 1000, // Ensure it‚Äôs on top of other elements
                    }}
                >
                </Snackbar>
            )}
        </AppRoot>
    );
};

export default INITTrainingBuyButton;