import '@telegram-apps/telegram-ui/dist/styles.css';
import axios from 'axios';
import React, {useEffect, useState} from 'react';
import {
    AppRoot,
    Button,
    Cell,
    Checkbox,
    IconContainer,
    Input,
    Section,
    Select, Snackbar,
} from "@telegram-apps/telegram-ui";
import INITBackButton from "../../../../Hooks/BackButton";
import { Icon28Stats } from "@telegram-apps/telegram-ui/dist/icons/28/stats";
import INITDivider from "../../../CustomComponents/Dividers/Divider";
import {useLocation, useNavigate} from "react-router-dom";
import INITProfileIcon from "../../../CustomComponents/Icons/ProfileIcon";
import useUserSession from "../../../CustomComponents/userSessionJWT/sessionJWT";
import {initiatePayment} from "../../../CustomComponents/Payment/Starspayment";


const BACKEND_PUBLIC_URL = process.env.REACT_APP_BACKEND_PUBLIC_URL;

const handleClickHaptic = (effect = 'light') =>{
    window.Telegram.WebApp.HapticFeedback.impactOccurred(effect);
}

const Calculator = () => {
    INITBackButton();
    const {userSession, loading: sessionLoading} = useUserSession();
    const navigate = useNavigate();
    const [isSnackbarVisible, setSnackbarVisible] = useState(false);
    const [error, setError] = useState(null);
    const location = useLocation();
    const { title, price } = location.state;
    const [paymentStatus, setPaymentStatus] = useState(null);


    // const userSession = getSession();

    const [age, setAge] = useState('');
    const [height, setHeight] = useState('');
    const [weight, setWeight] = useState('');
    const [gender, setGender] = useState('–ú—É–∂—á–∏–Ω–∞');
    const [activityLevel, setActivityLevel] = useState('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å');
    const [weightLoss, setWeightLoss] = useState(false);

    const [totalCalories, setTotalCalories] = useState(0);
    const [proteins, setProteins] = useState(0);
    const [fats, setFats] = useState(0);
    const [carbs, setCarbs] = useState(0);

    const [mealPlan, setMealPlan] = useState(null);
    const [mealPlanError, setMealPlanError] = useState(null);

    const calculateMacros = async () => {
        const numericAge = parseFloat(age) || 0;
        const numericHeight = parseFloat(height) || 0;
        const numericWeight = parseFloat(weight) || 0;

        if (numericAge <= 0 || numericHeight <= 0 || numericWeight <= 0) {
            alert("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞, —Ä–æ—Å—Ç–∞ –∏ –≤–µ—Å–∞.");
            return;
        }

        const baseCalories =
            gender === '–ú—É–∂—á–∏–Ω–∞'
                ? 10 * numericWeight + 6.25 * numericHeight - 5 * numericAge + 5
                : 10 * numericWeight + 6.25 * numericHeight - 5 * numericAge - 161;

        const activityMultiplier = {
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": 1.2,
            "–ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": 1.375,
            "–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": 1.55,
            "–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": 1.725,
            "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": 1.9,
        }[activityLevel] || 1.2;

        let total = baseCalories * activityMultiplier;

        if (weightLoss && total > 1800) {
            total -= 500;
        }
        else{
            setWeightLoss(false);
        }

        if (total < 1300) {
            alert('–í—ã –Ω–µ –º–æ–∂–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å –ø–∏—Ç–∞–Ω–∏—è –Ω–∏–∂–µ 1300–∫–∫–∞–ª!')
            total = 1350;
        }


        const proteinGrams = Math.round((total * 0.3) / 4);
        const fatGrams = Math.round((total * 0.25) / 9);
        const carbGrams = Math.round((total * 0.45) / 4);

        setTotalCalories(Math.round(total));
        setProteins(proteinGrams);
        setFats(fatGrams);
        setCarbs(carbGrams);

        try {
            const response = await axios.get(
                `${BACKEND_PUBLIC_URL}/mealplans/get-mealplan`,
                { params: { calories: Math.round(total) } }
            );
            setMealPlan(response.data);
            setMealPlanError(null);
        } catch (error) {
            console.error('Error fetching meal plan:', error);
            setMealPlanError('Failed to fetch a meal plan. Try again later.');
        }
    };

    const saveMealPlan = async () => {
        if(sessionLoading){
            console.log("üîπWaiting for sessionüîπ")
            return;
        }
        if(!userSession || !userSession.token){
            console.error("‚ùå No valid session found, aborting fetch.");
            setError("User not authenticated");
            return;
        }
        try {

            const userId = userSession.token;
            const mealPlanId = mealPlan?.id;

            if (!userId || !mealPlanId) {
                alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.');
                return;
            }

            await axios.post(
                `${BACKEND_PUBLIC_URL}/user_mealplans/save-mealplan`,
                { mealPlanId },
                {
                    headers:{
                        Authorization: `Bearer ${userId}`,
                        "Content-Type": "application/json",
                    }
                }
            );

            setSnackbarVisible(true);
            setTimeout(async () => {
                navigate('/'); // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            },2000)
        } catch (error) {
            if (error.response && error.response.status === 409) {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –ø–ª–∞–Ω
                alert('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è. –ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ.');
            } else {
                // –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è:', error);
                alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            }
        }
    };

    // ‚úÖ Runs `successfulPayment()` when payment is marked as "paid"
    useEffect(() => {
        if (paymentStatus === "paid") {
            console.log("üéâ Payment successful! Running successfulPayment...");
            saveMealPlan();
        }
    }, [paymentStatus]);

    // ‚úÖ Handles initiating payment
    const handlePayment = () => {
        handleClickHaptic('light');

        initiatePayment(
            userSession,
            (status) => {
                console.log("üìå Payment Status Changed:", status);
                setPaymentStatus(status);
            },
            setError,
            title,
            "–î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É",
            price
        );
    };

    const handleCloseSnackbar = () => {
        setSnackbarVisible(false);
    };
    if (error) {
        return <AppRoot style={{ color: "red" }}>{error}</AppRoot>;
    }
    return (
        <AppRoot>
            <Section header="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è">
                <div style={{ textAlign: "center" }}>
                    <iframe
                        width="90%"
                        height="215"
                        src="https://www.youtube.com/embed/ai3kswDDvbQ"
                        style={{
                            border: "none", // Removes the border
                            borderRadius: 16,
                            padding: 5,
                        }}
                        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                        allowFullScreen
                    ></iframe>
                </div>
            </Section>
            <Section
                header="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ª–æ—Ä–∏–π"
                style={{
                    width: '100%',
                }}
            >
                <Section header="–í–æ–∑—Ä–∞—Å—Ç" style={{ paddingLeft: '10px',  paddingRight: '10px', paddingBottom: '10px' }}>
                    <Input
                        placeholder="–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç"
                        value={age}
                        onChange={(e) => setAge(e.target.value)}
                        //type="number"
                    />
                </Section>

                <Section header="–†–æ—Å—Ç" style={{ paddingLeft: '10px',  paddingRight: '10px', paddingBottom: '10px' }}>
                    <Input
                        placeholder="–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π —Ä–æ—Å—Ç –≤ —Å–º"
                        value={height}
                        onChange={(e) => setHeight(e.target.value)}
                        //type="number"
                    />
                </Section>

                <Section header="–í–µ—Å" style={{ paddingLeft: '10px',  paddingRight: '10px', paddingBottom: '10px' }}>
                    <Input
                        placeholder="–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≤–µ—Å –≤ –∫–≥"
                        value={weight}
                        onChange={(e) => setWeight(e.target.value)}
                        //type="number"
                    />
                </Section>

                <Section header="–ü–æ–ª" style={{ paddingLeft: '10px',  paddingRight: '10px', paddingBottom: '10px' }}>
                    <Select
                        value={gender}
                        onChange={(e) => setGender(e.target.value)}
                    >
                        <option>–ú—É–∂—á–∏–Ω–∞</option>
                        <option>–ñ–µ–Ω—â–∏–Ω–∞</option>
                    </Select>
                </Section>

                <Section header="–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏" style={{ paddingLeft: '10px',  paddingRight: '10px', paddingBottom: '10px' }}>
                    <Select
                        value={activityLevel}
                        onChange={(e) => setActivityLevel(e.target.value)}
                    >
                        <option>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</option>
                        <option>–ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</option>
                        <option>–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</option>
                        <option>–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</option>
                        <option>–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</option>
                    </Select>
                </Section>
                <Cell
                    Component="label"
                    before={<Checkbox
                        name="weightLoss"
                        checked={weightLoss}
                        onChange={(e) => setWeightLoss(e.target.checked)}
                    />}
                    description="(-500–∫–∫–∞–ª)"
                    multiline
                >
                    –ü–æ—Ö—É–¥–µ—Ç—å
                </Cell>

                <Button
                    mode="filled"
                    size="m"
                    stretched
                    onClick={calculateMacros}
                    style={{
                        paddingTop: '10px',
                    }}
                >
                    –†–∞—Å—Å—á–∏—Ç–∞—Ç—å
                </Button>
            </Section>
            <INITDivider color="transparent" thickness="10%" />
            {/* Meal Plan Section */}
            <Section header="–í–∞—à –∫–∞–ª–æ—Ä–∞–∂">
                <Cell before={<IconContainer><Icon28Stats /></IconContainer>}>
                    –û–±—â–∏–µ –∫–∞–ª–æ—Ä–∏–∏: {totalCalories} –∫–∫–∞–ª
                </Cell>
                <Cell before={<IconContainer><Icon28Stats /></IconContainer>}>
                    –ë–µ–ª–∫–∏: {proteins} –≥ ({proteins * 4} –∫–∫–∞–ª)
                </Cell>
                <Cell before={<IconContainer><Icon28Stats /></IconContainer>}>
                    –ñ–∏—Ä—ã: {fats} –≥ ({fats * 9} –∫–∫–∞–ª)
                </Cell>
                <Cell before={<IconContainer><Icon28Stats /></IconContainer>}>
                    –£–≥–ª–µ–≤–æ–¥—ã: {carbs} –≥ ({carbs * 4} –∫–∫–∞–ª)
                </Cell>
                {/*{mealPlanError && <Cell style={{ color: 'red' }}>{mealPlanError}</Cell>}*/}
                {mealPlan && <Cell>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–ª–∞–Ω: {mealPlan.title}</Cell>}
            </Section>

            <Button
                disabled={!mealPlan}
                mode="filled"
                size="m"
                stretched
                onClick={handlePayment}
                style={{
                    paddingTop: '10px',
                }}
            >
                –ö—É–ø–∏—Ç—å: {price} Stars
            </Button>

            {isSnackbarVisible && (
                <Snackbar
                    before={<INITProfileIcon/>}
                    children={mealPlan.title}
                    description="–î–æ–±–∞–≤–ª–µ–Ω –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É(–≤—ã –º–æ–∂–∏—Ç–µ –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ)"
                    duration={2000}
                    onClose={handleCloseSnackbar}
                    style={{
                        zIndex: 1000, // Ensure it‚Äôs on top of other elements
                    }}
                >
                </Snackbar>
            )}

        </AppRoot>
    );
};

export default Calculator;